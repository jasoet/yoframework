plugins {
    id "java-library"
    id "org.jetbrains.kotlin.jvm"
    id "org.jetbrains.kotlin.kapt"
    id "io.gitlab.arturbosch.detekt"
    id "idea"
    id "maven-publish"
    id "jacoco"
}

repositories {
    mavenLocal()
    mavenCentral()
    google()
    maven {
//        url "https://maven.pkg.github.com/jasoet/yoframework"
        url "https://jitpack.io"
    }
}

group = 'com.github.jasoet'

dependencies {

    api "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    api "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutineVersion"

    api "io.arrow-kt:arrow-core:$arrowVersion"
    api "io.arrow-kt:arrow-typeclasses:$arrowVersion"

    api "io.arrow-kt:arrow-instances-data:$arrowVersion"
    api "io.arrow-kt:arrow-instances-core:$arrowVersion"

    api "io.arrow-kt:arrow-data:$arrowVersion"
    api "io.arrow-kt:arrow-syntax:$arrowVersion"
    kapt "io.arrow-kt:arrow-annotations-processor:$arrowVersion"

    api "com.google.dagger:dagger:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kaptTest "com.google.dagger:dagger-compiler:$daggerVersion"

    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    testImplementation "org.amshove.kluent:kluent:$kluentVersion"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$jUnitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jUnitVersion"

    testImplementation("org.jetbrains.spek:spek-api:$spekVersion") {
        exclude group: 'org.jetbrains.kotlin'
    }
    testRuntimeOnly("org.jetbrains.spek:spek-junit-platform-engine:$spekVersion") {
        exclude group: 'org.jetbrains.kotlin'
    }

    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detektVersion"
}

kotlin {
    jvmToolchain(20)
}

tasks {

    compileKotlin {
        kotlinOptions {
            apiVersion = "1.9"
            languageVersion = "1.9"
            allWarningsAsErrors = true
        }
    }

    compileTestKotlin {
        kotlinOptions {
            apiVersion = "1.9"
            languageVersion = "1.9"
            allWarningsAsErrors = true
//            freeCompilerArgs = [
////                "-Xuse-k2", "-Xbackend-threads=2"
//            ]
        }
    }

    test {
        finalizedBy jacocoTestReport

        useJUnitPlatform {
            includeEngines 'spek', 'junit-jupiter'
        }

        testLogging {
            exceptionFormat "full"
            showCauses true
            showExceptions true
            showStackTraces true
            showStandardStreams true
            events = ["passed", "skipped", "failed", "standardError"]
        }
    }

    jacoco {
        toolVersion = "0.8.9"
    }

    jacocoTestReport {
        dependsOn test // tests are enabled to run before generating the report
        reports {
            xml.required = false
            csv.required = false
            html.outputLocation = file("${getLayout().getBuildDirectory()}/jacocoHtml")
        }
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true

            testSourceDirs += file('build/generated/source/kapt/test')
            sourceDirs += file('build/generated/source/kapt/main')

            testSourceDirs += file('build/generated/source/kaptKotlin/test')
            sourceDirs += file('build/generated/source/kaptKotlin/main')
        }
    }
}

tasks.register('compile') { dependsOn "testClasses" }

tasks.register('sourcesJar', Jar) {
    dependsOn classes
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

detekt {
    toolVersion = "1.23.0"
    input = files("src/main/kotlin")
    buildUponDefaultConfig = true
    parallel = true
    debug = false
    ignoreFailures = true
    config = files("$rootDir/detekt.yml")

    reports {
        html.enabled = true
        xml.enabled = false
        txt.enabled = false
        sarif.enabled = false
    }
}
tasks.detekt.jvmTarget = "17"

def pomConfig = {
    name = "Yo Framework"
    description = "Thin Kotlin DSL on top of Dagger and Vert.x"
    url = "https://yoframework.id"
    licenses {
        license {
            name = "The Apache Software License, Version 2.0"
            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution = "repo"
        }
    }
    developers {
        developer {
            id = "jasoet"
            name = "Deny Prasetyo"
            email = "jasoet87@gmail.com"
        }
    }
    scm {
        url = "https://github.com/jasoet/yoframework"
    }
}

publishing {
    publications {
        YoPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            groupId 'com.github.jasoet.yoframework'
            artifactId "${project.name}"
            version "${version}"
            pom pomConfig
        }
    }

//    repositories {
//        maven {
//            name = "GitHubPackages"
//            url = "https://maven.pkg.github.com/jasoet/yoframework"
//            credentials {
//                username = System.getenv("GITHUB_ACTOR")
//                password = System.getenv("GITHUB_TOKEN")
//            }
//        }
//    }
}
